#!/bin/bash

. `dirname $0`/git-safety-functions.sh

# check for -f flag as first argument; if present, bypass all restrictions
if [[ "$1" == "-f" ]]; then
	shift
	git-merge "$@"
	exit 0
fi
 
# Echo usage if there are no args
if [[ $# == 0 ]]; then
	echo =============================
	echo 'You are using "git safetymerge"'
	echo 'Please supply args just as you would for "git merge"'
	echo =============================
	exit 1
fi
 
# copy args so that $@ can be shifted but we can pass all args to git-merge
args=$@
 
# Determine whether this is the Dataraptor proj.
# If so, impose constraints. If not, skip to execution.
if $use_safety_extension; then
 
	# determine current branch
	dst=$(git status | grep "On branch" | cut -d " " -f 4)
	# determine source of merge
	while (( $# )); do
		[[  "$1" =~ ^- ]] || break
		shift
	done
	src=$1
 
	# Echo debug message
	echo Merge requested from $src to $dst
 
	# determine whether current branch be behind its remote tracking branch
	branch_description=$( git branch --list -vv | grep '^\*' )
	is_behind=$( echo "$branch_description" | grep  -e '\[.*behind.*\]' )
	# Fail if current branch be behind its remote tracking branch
	[[ ! -z "$is_behind" ]] && fail "Your branch is behind the remote branch. Pull before merging."
 
 
	# Fail if master|develop merges to master|develop
	[[ "$src" =~ ^(master|develop)$ && "$dst" =~ ^(master|develop)$ ]] && fail "You may not merge between master and develop"
 
fi
 
# Execute merge
git-merge $args
 
# Echo ending message
echo end without error